@page "/singlestudent"
@page "/singlestudent/{id:int}"
@inject IStudentService StudentService

@if (Id == null)
{
    <PageTitle>Create Student</PageTitle>
    <h3>Create Student</h3>
}
else
{
    <PageTitle>Edit @student.FirstName</PageTitle>
    <h3>Edit @student.FirstName</h3>
}

<EditForm Model="student" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="student.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="student.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="student.Email" class="form-control"></InputText>
    </div>
    <div>
        <label>Student Group</label><br />
        <InputSelect @bind-Value="student.StudentGroupId" class="form-select">
            @foreach (var group in StudentService.StudentGroups)
            {
                <option value="@group.Id">@group.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteStudent">Delete student</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Student student = new Student { StudentGroup = new StudentGroup() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save " : "Update";
        await StudentService.GetStudentGroups();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            student.StudentGroup = StudentService.StudentGroups[0];
            student.StudentGroupId = student.StudentGroup.Id;
        }
        else
        {
            student = await StudentService.GetSingleStudet((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await StudentService.CreateStudent(student);
        }
        else
        {
            await StudentService.UpdateStudent(student);
        }
    }

    async Task DeleteStudent()
    {
        await StudentService.DeleteStudent(student.Id);
    }
}
